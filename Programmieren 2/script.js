// 1 = Grün, 2 = Schwarz, 3 = Gelb, sonst = Rot

let matrix;
let zeile = [];
let objekteListe = [new fleischfresser(20,20), new Gras(11,10), new Gras(12,10), new Gras(13,10), new Gras(10,11), new Gras(10,12), new Gras(10,13), new Gras(9,10), new Gras(8,10), new Gras(7,10), new Gras(10,9), new Gras(10,8), new Gras(10,7), ];

function setup() {
  createCanvas(500,500)
  matrix = erstelleMatrix()
  
  for (let x = 0; x < 1; x++) {
    let zeile = 10 //randomNumber(0,50)
    let spalte = 10 //randomNumber(0,50)
    objekteListe.push(new rasenDestroyer(zeile,spalte))
  } 

  for (let x = 0; x < objekteListe.length; x++) {
    objekteListe[x].selbstplatzierung();
  }

  //rasenDestroyerHacked.selbstplatzierung()
}

function draw(){
  noStroke()
  frameRate(30)
  //rasenDestroyerHacked.spielzug()

  for (let i = 0; i < objekteListe.length; i++) {
    objekteListe[i].spielzug();
  }
  
  console.log(objekteListe.length)
  zeichneMatrix();
}


function zeichneMatrix(){
  for (let x = 0; x < matrix.length; x++) {
    for (let y = 0; y < matrix.length; y++) {
      //console.log(matrix[x][y])
      if (matrix[y][x] === 1) {
        fill("green")
      }else if(matrix[y][x] === 2){
        fill("black")
      }else if(matrix[y][x] === 3){
        fill("yellow")
      }else {
        fill("red")
      }
      rect(x*10,y*10,10)
    }
  }
}

function erstelleMatrix() {
  let matrix = [];
  for (let x = 0; x < 50; x++) {
    zeile = [];
    for (let y = 0; y < 50; y++) {
      zeile.push(3);
    }
    matrix.push(zeile);
  } 
  return matrix;
}


function randomNumber(min,max) {
  return Math.floor(Math.random() * (max - min) + min)
}

/*let rasenDestroyerHacked = {
  zeile: 5,
  spalte: 0,
  selbstplatzierung() {
    matrix[this.zeile][this.spalte] = 2
  },
  bewegung() {
    let felder = this.erstellefeldertabelle();
    //console.log(felder);
    if (felder.length > 0) {
      //console.log(felder.length,Math.round(random(0,felder.length-1)))
      let gewähltesFeld = felder[Math.round(random(0,felder.length-1))];
      matrix[this.zeile][this.spalte] = 1;
      this.zeile = gewähltesFeld[0];
      this.spalte = gewähltesFeld[1];
      matrix[this.zeile][this.spalte] = 2;
    }

  },
  erstellefeldertabelle() {
    let benachbarteFelder = [
      [this.zeile+1,this.spalte],
      [this.zeile,this.spalte+1],
      [this.zeile-1,this.spalte],
      [this.zeile,this.spalte-1],
    ]

    return benachbarteFelder.filter(this.istFeld);

  },
  istFeld (koordinatenPaar) {
    let spalte = koordinatenPaar[1]
    let zeile = koordinatenPaar[0]
  
    if (zeile >= 0
      && spalte >= 0
      && zeile < matrix.length
      && spalte < matrix.length
      && matrix[zeile][spalte] === 1 ) {
      return(true)
    }else if (zeile >= 0
      && spalte >= 0
      && zeile < matrix.length
      && spalte < matrix.length
      && matrix[zeile][spalte] === 3 ) {
        return(true)
      }else{
      return(false)
    }
  }
}*/

/*let matrix = [
[3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0],
[3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,0,0,0,0,0,0,1,0,0],
[3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0],
[3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0],
[3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0],
[3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,0,0,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,2,0,1,0,0,0,0],
[3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,2,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0],
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0],
[1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
[1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
[1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1],
[1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,0,0,0,0,0,0,1,1,1,1,1,1],
[1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1],
[1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,0,1,0,0,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,0,0,2,1,1,1,1,1,1,1,1,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3],
[1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,2,0,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,0,0,1,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,0,0,0,0,1,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,0,0,0,1,1,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,0,0,1,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,2,0,1,1,1,1,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,2,1,0,2,0,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,2,0,0,1,1,1,1,0,1,0,0,1,0,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3],
[1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,3,3,3,3,3,3,3,3,3,3],
]*/

//document.body.

/*let anzahl = parseInt(prompt("Gib an wie viele Leute essen"))

let rezept = [
  ["eier",1,"st"],
  ["milch",6,"l"],
  ["mehl",100,"g"],
]

for (let i = 0; i < rezept.length; i++) {
  if (anzahl === "u") {
    console.log(rezept[i][0],":","∞",rezept[i][2])
  }else{
    console.log(rezept[i][0],":",rezept[i][1]*anzahl,rezept[i][2])
  }
}*/

/*let matrix = [
  [1,1,0,1,0,0,1,1,1,1],
  [0,0,0,1,0,0,0,0,0,0],
  [1,0,0,1,0,1,1,1,0,1],
  [1,0,0,0,0,0,0,0,0,1],
  [1,0,0,0,0,0,0,0,0,0],
  [1,0,0,0,0,1,0,0,0,1],
  [0,0,0,0,0,1,0,0,0,1],
  [1,1,0,0,0,0,0,0,0,1],
  [0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,1,1,1,1,1,1]
];*/

/*function istTreffer(koordinatenPaar) {
  let spalte = koordinatenPaar[1]
  let zeile = koordinatenPaar[0]

  if (zeile >= 0
    && spalte >= 0
    && zeile < matrix.length
    && spalte < matrix.length
    && matrix[zeile][spalte] === 1) {
    return(true)
  }else{
    return(false)
  }
}

let trefferTabelle = koordinatenTabelle.filter(istTreffer);
console.log(trefferTabelle)

// Tests:
console.log(istTreffer([0,0])); // true
console.log(istTreffer([1,9])); // false
console.log(istTreffer([9,8])); // true
console.log("");
console.log(istTreffer([11,33])); // false
console.log(istTreffer([4,7])); // false*/